import io.kotlintest.matchers.shouldBe
import org.junit.Test

internal class Advent5Test {
    @Test
    fun `opcode 1 reads two numbers and stores them in a memory location`() {
        A5()
            .run("1,1,2,3,99")
            .view(3) shouldBe 3
    }

    @Test
    fun `opcode 2 multiplies two numbers and stores them in a memory location`() {
        A5()
            .run("2,0,0,5,99,0")
            .view(5) shouldBe 4
    }

    @Test
    fun `opcode 3 stores input into a memory location`() {
        A5()
            .withInput(1)
            .run("3,0,99")
            .view(0) shouldBe 1
    }

    @Test
    fun `opcode 4 loads a memory location into output`() {
        A5()
            .run("4,0,99")
            .view(0) shouldBe 4
    }

    // NB I'm implicitly testing instruction modes here.
    @Test
    fun `opcode 5 moves the PC to the second param if the first param is non-zero`() {
        A5()
            .run("1105,1,7,2,0,0,0,1,0,0,0,99") // jump, execute ADD 0 0 0
            .view(0) shouldBe 1105 + 1105
    }

    @Test
    fun `opcode 5 does not move the PC to the second param if the first param is zero`() {
        A5()
            .run("1105,0,7,2,0,0,0,1,0,0,0,99") // no jump, execute MUL 0 0 0, ADD 0 0 0
            .view(0) shouldBe 1105 * 1105 * 2
    }

    @Test
    fun `opcode 6 moves the PC to the second param if the first param is zero`() {
        A5()
            .run("1106,0,7,2,0,0,0,1,0,0,0,99")
            .view(0) shouldBe 1106 + 1106
    }

    @Test
    fun `opcode 6 does not move the PC to the second param if the first param is non-zero`() {
        A5()
            .run("1106,1,7,2,0,0,0,1,0,0,0,99")
            .view(0) shouldBe 1106 * 1106 * 2
    }

    @Test
    fun `opcode 7 stores 1 if the first param is less than the second param`() {
        A5()
            .run("1107,1,3,0,99")
            .view(0) shouldBe 1
    }

    @Test
    fun `opcode 7 stores 0 if the first param is not less than the second param`() {
        A5()
            .run("1107,3,3,0,99")
            .view(0) shouldBe 0
    }

    @Test
    fun `opcode 8 stores 1 if the first param is equal to the second param`() {
        A5()
            .run("1108,3,3,0,99")
            .view(0) shouldBe 1
    }

    @Test
    fun `opcode 8 stores 0 if the first param is not equal to the second param`() {
        A5()
            .run("1107,3,1,0,99")
            .view(0) shouldBe 0
    }

    @Test
    fun `executes part 1 sample problems`() {
        A5().run("1,0,0,0,99").view() shouldBe "2,0,0,0,99"
        A5().run("2,3,0,3,99").view() shouldBe "2,3,0,6,99"
        A5().run("2,4,4,5,99,0").view() shouldBe "2,4,4,5,99,9801"
        A5().run("1,1,1,4,99,5,6,0,99").view() shouldBe "30,1,1,4,2,5,6,0,99"
    }

    @Test
    fun `part 1`() {
        println(A5().withInput(1).run(puzzle).output)
    }

    @Test
    fun `executes part 2 sample problems`() {
        A5().withInput(8).run("3,9,8,9,10,9,4,9,99,-1,8").output shouldBe 1
        A5().run("3,9,8,9,10,9,4,9,99,-1,8").output shouldBe 0
    }

    @Test
    fun `part 2`() {
        println(A5().withInput(5).run(puzzle).output)
    }


    private val puzzle = "3,225," +
            "1,225,6,6," +
            "1100,1,238,225," +
            "104,0," +
            "1102,40,93,224," +
            "1001,224,-3720,224," +
            "4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,56,23,225,1102,64,78,225,1102,14,11,225,1101,84,27,225,1101,7,82,224,1001,224,-89,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,1,35,47,224,1001,224,-140,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1101,75,90,225,101,9,122,224,101,-72,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,36,63,225,1002,192,29,224,1001,224,-1218,224,4,224,1002,223,8,223,1001,224,7,224,1,223,224,223,102,31,218,224,101,-2046,224,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1001,43,38,224,101,-52,224,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1102,33,42,225,2,95,40,224,101,-5850,224,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1102,37,66,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,677,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,344,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,359,1001,223,1,223,108,677,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,389,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,404,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,419,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,449,101,1,223,223,7,677,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,7,226,226,224,1002,223,2,223,1005,224,479,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,494,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,509,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1107,226,226,224,102,2,223,223,1006,224,539,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,554,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,677,677,224,102,2,223,223,1005,224,584,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,599,1001,223,1,223,1108,226,677,224,102,2,223,223,1006,224,614,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,108,226,677,224,1002,223,2,223,1005,224,644,101,1,223,223,8,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226"
}